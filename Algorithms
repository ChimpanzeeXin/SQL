 从数据结构开始学算法：
 **linked list
 1. Dummy head: keep the reference of head and return to the whole linked list in the end
 2. Iterate linked list (and add new node to linked list):
     cur.next = newNode
     cur = cur.next
 3. Recursion is faster than iteration?
 4. Aways to check if the head is None at the beginning
 5.为啥要考linked list？
 The whole point of asking any candidates a linked list problem is to test if the candidates think about edge cases, including:
     a.Dereferencing Null Pointer, usually targeting tail pointer
     b.When given Head is None
     c.When there are duplications in the list
 
 **Recursion:
 个人感觉和建议，有2点：写出递归函数也就是要处理好递归的3个主要的点: 
 a)出口条件，即递归“什么时候结束”，这个通常在递归函数的开始就写好;   
 b) 如何由"情况 n" 变化到"情况 n+1", 也就是非出口情况，也就是一般情况——"正在"递归中的情况； 
 c) 初始条件，也就是这个递归调用以什么样的初始条件开始
 可以说，上述a,b,c三个条件组成了我们的递归函数；解决好上述3点，也就很容易地写出一个递归函数；
 剩下的就是去学习学习“数学归纳法”，请自己google之；不许要你称为归纳法专家，但只需要认证体会它的思路，对于你理解和创造递归函数有很大帮助

 
 **Tree
 1. 出口条件：可返回0，可返回None
    当我们要求height时，返回0， 并返回max（left_height，right_height）+1，例如leetcode543
    当我们要找某个节点时，返回None，例如235
    当我们返回bool时，出口条件就是False 例如112, recursion中的返回值也是bool
 2. 二叉搜索树，中序遍历出来的结果就是有序的
 3. Preorder: the first item is the root
    eg. leetcode 105 https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/discuss/34579/Python-short-recursive-solution.
 
 **DP
 1.  转移方程通常要转化为max或min, eg.53
 
 
 一些辅助工具：
 #Hash Table
 Hash table is useful to record reference for index in array(1) or linked list(141)! But is cost space complexity O(n)
 
 #two pointers
 1. Application of fast and slow pointers
   a. fast and slow pointers will finally meet: Cyclic questions(141)
   b. find mid point of linked list by fast and slow pointers(234)
   

#swap in python is direct:
  s[left], s[right] = s[right], s[left]  
  eg. 344 also two pointers!
 
 
 
 

#In computer science, an in-place algorithm is an algorithm which transforms input using no auxiliary data structure



# Greedy Algorithm
The algorithm makes the optimal choice at each step as it attempts to find the overall optimal way to solve the entire problem. 


#Math: get rid of the first digit: number%(比number少一位的10000)
#      get rid of the last digit : number//10
#      need the first digit: number // (比number少一位的10000)
#      need the last digit number: number % 10
见leetcode Q7,9

#Math: Digit Root
The digital root of a number is equal to the remainder when that number is divided by 9. If the remainder is 0 and the number is greater than 0, then the digital root is 9. If the number is 0, then the digital root of the number is 0.


****总是整不明白的题目！
206. reverse linked list
iteration方法考察的赋值先后顺序，逻辑参考：https://leetcode-cn.com/problems/reverse-linked-list/solution/dong-hua-yan-shi-206-fan-zhuan-lian-biao-by-user74/. 注意最后返回prev！234 uses this reverse idea as well

